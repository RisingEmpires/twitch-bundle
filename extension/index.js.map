{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/extension/index.ts","webpack:///external \"@twurple/auth\"","webpack:///./src/extension/router/twitch-auth.ts","webpack:///external \"urijs\"","webpack:///external \"node-fetch\"","webpack:///external \"@twurple/api\"","webpack:///external \"@twurple/pubsub\"","webpack:///external \"@twurple/chat\"","webpack:///external \"@twurple/common\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nodecg","twitchClient","twitchPubSubClient","twitchChatClient","twitchCredentials","Replicant","defaultValue","clientId","clientSecret","accessToken","undefined","refreshToken","expiresIn","obtainmentTimestamp","connectedAs","isConnected","twitchEvents","twitchClips","twitchChat","twitchPubSubListeners","twitchChatClientListeners","twitchChatBadges","addTwitchPubSubEvent","messageName","data","log","info","JSON","stringify","rawDataSymbol","unshift","type","sendMessage","updateTwitchClips","clips","getClipsForBroadcasterPaginated","getAll","then","sort","a","b","creationDate","getTime","map","clip","id","creatorDisplayName","title","url","thumbnailUrl","replace","creator_name","created_at","toISOString","twitchHello","twitchHelloIgnore","manageTwitchChatMessages","channel","user","message","msg","length","shift","savedMessage","rawMessage","username","userInfo","displayName","user_colour","color","user_badges","badgeMap","badges","badgeArray","forEach","badgeVer","badgeName","badge","version","getVersion","push","getImageUrl","parsedMessage","parseEmotes","messageId","messageTime","Date","findIndex","e","includes","firstMessageTimestamp","checkHello","onTwitchDeleteChatMessage","text","position","onChatUserTimeout","twitchSubs","twitchFollows","listenFor","_val","ack","subscriptions","getSubscriptions","subs","filter","v","userName","followResult","users","getFollowsPaginated","followedUser","f","onTwitchAuthSuccess","authProvider","RefreshingAuthProvider","onRefresh","tokens","ApiClient","getMe","SingleUserPubSubClient","onBits","onRedemption","onBitsBadgeUnlock","ChatClient","channels","onMessage","onAction","onDelete","onMessageRemove","onTimeout","connect","chat","getGlobalBadges","globalBadges","getChannelBadges","channelBadges","twitchAuthRouter","getTwitchAuthRouter","mount","bundleName","onSubscription","require","getCallbackUrl","protocol","config","ssl","enabled","host","baseURL","path","toString","onAuthSuccess","router","Router","util","authCheck","req","res","uri","addSearch","redirect","query","code","method","json","access_token","refresh_token","send","getAuthorizeUrl"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {RefreshingAuthProvider} from '@twurple/auth';\nimport {NodeCG, Replicant} from '../../../../types/server';\nimport {getTwitchAuthRouter} from \"./router/twitch-auth\";\nimport {\n\tPubSubEventMessage,\n\tTwitchChatClientListeners,\n\tTwitchClip,\n\tTwitchCredentials,\n\tTwitchEvent,\n\tTwitchPubSubListeners\n} from \"./types\";\nimport {ApiClient, HelixChatBadgeSet} from \"@twurple/api\";\nimport {SingleUserPubSubClient} from '@twurple/pubsub';\nimport {ChatClient} from '@twurple/chat';\nimport {ParsedMessagePart} from '@twurple/common';\nimport {TwitchPrivateMessage} from \"@twurple/chat/lib/commands/TwitchPrivateMessage\";\nimport {rawDataSymbol} from '@twurple/common';\n\ninterface ChatMessageData {\n\tusername: string,\n\tmessageTime: string,\n\tmessageId: string,\n\tparsedMessage: [ParsedMessagePart],\n}\n\ninterface TwitchHello {\n\tusername: string;\n\tfirstMessageTimestamp: number;\n}\n\nfunction Bundle(nodecg: NodeCG) {\n\tconst twitchCredentials: Replicant<TwitchCredentials> = nodecg.Replicant('twitchCredentials', {\n\t\tdefaultValue: {\n\t\t\tclientId: '',\n\t\t\tclientSecret: '',\n\t\t\taccessToken: undefined,\n\t\t\trefreshToken: undefined,\n\t\t\texpiresIn: 0,\n\t\t\tobtainmentTimestamp: 0,\n\t\t\tconnectedAs: undefined,\n\t\t\tisConnected: false,\n\t\t}\n\t});\n\tconst twitchEvents: Replicant<TwitchEvent[]> = nodecg.Replicant('twitchEvents', {defaultValue: []});\n\tconst twitchClips: Replicant<TwitchClip[]> = nodecg.Replicant('twitchClips', {defaultValue: []});\n\tconst twitchChat: Replicant<ChatMessageData[]> = nodecg.Replicant('twitchChat', {defaultValue: []});\n\tnodecg.Replicant<{ [id: string]: TwitchClip }>('twitchSelectedClips', {defaultValue: {}});\n\n\tlet twitchClient: ApiClient;\n\tlet twitchPubSubClient: SingleUserPubSubClient;\n\tlet twitchChatClient;\n\tlet twitchPubSubListeners: TwitchPubSubListeners = {};\n\tlet twitchChatClientListeners: TwitchChatClientListeners = {};\n\tlet twitchChatBadges: { [name: string]: HelixChatBadgeSet } = {};\n\n\tconst addTwitchPubSubEvent = (messageName: string) => (data: PubSubEventMessage) => {\n\t\tnodecg.log.info(`Received message ${messageName}`);\n\t\tnodecg.log.info(`Raw Data: ${JSON.stringify(data[rawDataSymbol].data, null, 4)}`);\n\t\ttwitchEvents.value.unshift({type: 'PubSub', messageName, data: data[rawDataSymbol].data});\n\t\tnodecg.sendMessage(messageName, data[rawDataSymbol].data);\n\t};\n\tconst clearTwitchEvents = () => {\n\t\ttwitchEvents.value = []\n\t};\n\tconst updateTwitchClips = () => {\n\t\tif (!twitchCredentials.value.connectedAs)\n\t\t\treturn;\n\n\t\ttwitchClient.clips.getClipsForBroadcasterPaginated(twitchCredentials.value.connectedAs).getAll().then(clips => {\n\t\t\ttwitchClips.value = clips.sort((a, b) => b.creationDate.getTime() - a.creationDate.getTime()).map(clip => {\n\t\t\t\tconst {id, creatorDisplayName, title, creationDate} = clip;\n\t\t\t\tconst thumbnailUrl = clip.thumbnailUrl.replace(\"-preview-480x272.jpg\", \".mp4\");\n\t\t\t\t// nodecg.log.info('Clips: ' + thumbnailUrl);\n\t\t\t\treturn {\n\t\t\t\t\tid,\n\t\t\t\t\turl: thumbnailUrl,\n\t\t\t\t\tcreator_name: creatorDisplayName,\n\t\t\t\t\ttitle,\n\t\t\t\t\tcreated_at: creationDate.toISOString()\n\t\t\t\t};\n\t\t\t});\n\t\t});\n\t};\n\n\tconst twitchHello: Replicant<TwitchHello[]> = nodecg.Replicant('twitchHello', {defaultValue: []});\n\tconst twitchHelloIgnore: Replicant<string[]> = nodecg.Replicant('twitchHelloIgnore', {defaultValue: []});\n\n\tconst checkHello = (message: any) => {\n\t\tconst userIndex = twitchHello.value.findIndex(e => e.username === message.username);\n\t\tif (userIndex >= 0) return;\n\t\tif (twitchHelloIgnore.value.includes(message.username)) return;\n\t\ttwitchHello.value.push({\n\t\t\tusername: message.username,\n\t\t\tfirstMessageTimestamp: message.messageTime,\n\t\t});\n\t}\n\n\tconst getChatBadgeArray = (badgeMap: Map<string, string>) => {\n\t\tlet badgeArray: string[] = [];\n\t\tbadgeMap.forEach((badgeVer, badgeName) => {\n\t\t\tconst badge = twitchChatBadges[badgeName];\n\t\t\tif (badge) {\n\t\t\t\tconst version = badge.getVersion(badgeVer);\n\t\t\t\tbadgeArray.push(version.getImageUrl(1));\n\t\t\t}\n\t\t})\n\t\treturn badgeArray;\n\t}\n\n\tconst manageTwitchChatMessages = (channel: string, user: string, message: string, msg: TwitchPrivateMessage) => {\n\t\tif (channel === `#${twitchCredentials.value.connectedAs.name}`) {\n\t\t\tif (twitchChat.value.length > 50) {\n\t\t\t\ttwitchChat.value.shift();\n\t\t\t}\n\t\t\tlet savedMessage = {\n\t\t\t\t...msg,\n\t\t\t\trawMessage: message,\n\t\t\t\tusername: msg.userInfo.displayName,\n\t\t\t\tuser_colour: msg.userInfo.color,\n\t\t\t\tuser_badges: getChatBadgeArray(msg.userInfo.badges),\n\t\t\t\tparsedMessage: msg.parseEmotes(),\n\t\t\t\tmessageId: msg.id,\n\t\t\t\tmessageTime: new Date().getTime(),\n\t\t\t}\n\t\t\t// @ts-ignore we've got slightly more than ChatMessageData but shh\n\t\t\ttwitchChat.value.push(savedMessage);\n\t\t\tcheckHello(savedMessage);\n\t\t}\n\t};\n\n\tconst onTwitchDeleteChatMessage = (channel: string, messageId: string) => {\n\t\ttwitchChat.value = twitchChat.value.map((m: ChatMessageData) => {\n\t\t\tif (m.messageId === messageId) {\n\t\t\t\tm.parsedMessage = [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\ttext: \"__REDACTED__\",\n\t\t\t\t\t\tlength: 12,\n\t\t\t\t\t\tposition: 0,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t\tm.username = \"USER PURGED\"\n\t\t\t}\n\t\t\treturn m;\n\t\t});\n\t};\n\n\tconst onChatUserTimeout = (channel: string, user: string) => {\n\t\ttwitchChat.value = twitchChat.value.map((m: ChatMessageData) => {\n\t\t\tif (m.username === user) {\n\t\t\t\tm.parsedMessage = [\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: \"text\",\n\t\t\t\t\t\ttext: \"_ _ REDACTED _ _\",\n\t\t\t\t\t\tlength: 12,\n\t\t\t\t\t\tposition: 0,\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t\tm.username = \"USER PURGED\"\n\t\t\t}\n\t\t\treturn m;\n\t\t});\n\t};\n\n\tconst twitchSubs: Replicant<{ username: string }[]> = nodecg.Replicant('twitchSubscribers', {defaultValue: []});\n\tconst twitchFollows: Replicant<{ username: string }[]> = nodecg.Replicant('twitchFollowers', {defaultValue: []});\n\n\tnodecg.listenFor('refreshCredits', async (_val, ack) => {\n\t\tnodecg.log.info('refreshCredits');\n\t\tconst subResult = twitchClient.subscriptions.getSubscriptions(twitchCredentials.value.connectedAs);\n\t\tconst subs = await subResult;\n\t\ttwitchSubs.value = subs.data\n\t\t\t.filter(v => v.userName !== twitchCredentials.value.connectedAs.name)\n\t\t\t.map(v => ({username: v.userDisplayName}));\n\t\tconst followResult = twitchClient.users.getFollowsPaginated({followedUser: twitchCredentials.value.connectedAs});\n\t\ttwitchFollows.value = await followResult.getAll()\n\t\t\t.then(r => r.map(f => ({username: f.userDisplayName})));\n\t\t// @ts-ignore\n\t\tack(null, 'complete');\n\t});\n\n\tconst onTwitchAuthSuccess = async () => {\n\t\tconst {clientId, clientSecret} = twitchCredentials.value;\n\n\t\tconst authProvider = new RefreshingAuthProvider(\n\t\t\t{\n\t\t\t\tclientId,\n\t\t\t\tclientSecret,\n\t\t\t\tonRefresh: async tokens => {\n\t\t\t\t\tnodecg.log.info('Refreshing Twitch Credentials');\n\t\t\t\t\ttwitchCredentials.value.accessToken = tokens.accessToken;\n\t\t\t\t\ttwitchCredentials.value.refreshToken = tokens.refreshToken;\n\t\t\t\t\ttwitchCredentials.value.expiresIn = tokens.expiresIn;\n\t\t\t\t\ttwitchCredentials.value.obtainmentTimestamp = tokens.obtainmentTimestamp;\n\t\t\t\t}\n\t\t\t},\n\t\t\ttwitchCredentials.value,\n\t\t);\n\t\ttwitchClient = new ApiClient({authProvider});\n\t\tawait twitchClient.users.getMe().then(r => {\n\t\t\ttwitchCredentials.value.connectedAs = {id: r.id, name: r.name};\n\t\t\ttwitchCredentials.value.isConnected = true;\n\t\t});\n\n\t\ttwitchPubSubClient = new SingleUserPubSubClient({authProvider});\n\t\ttwitchPubSubListeners.onBits = await twitchPubSubClient.onBits(addTwitchPubSubEvent('bits'));\n\t\t// Currently not used on frontend, will need to make custom event manager\n\t\t// twitchPubSubListeners.onSubscription = await twitchPubSubClient.onSubscription(addTwitchPubSubEvent('subscription'));\n\t\ttwitchPubSubListeners.onRedemption = await twitchPubSubClient.onRedemption(addTwitchPubSubEvent('redemption'));\n\t\ttwitchPubSubListeners.onBitsBadgeUnlock = await twitchPubSubClient.onBitsBadgeUnlock(addTwitchPubSubEvent('bitsBadgeUnlock'));\n\n\t\ttwitchChatClient = new ChatClient({channels: [twitchCredentials.value.connectedAs.name]});\n\n\t\t// twitchChatClient.onJoin((channel, user) => {\n\t\t// \tnodecg.log.info(`Twitch Chat: Connected to ${channel} as ${user}`);\n\t\t// });\n\t\ttwitchChatClientListeners.onMessage = twitchChatClient.onMessage(manageTwitchChatMessages);\n\t\ttwitchChatClientListeners.onAction = twitchChatClient.onAction(manageTwitchChatMessages);\n\t\ttwitchChatClientListeners.onDelete = twitchChatClient.onMessageRemove(onTwitchDeleteChatMessage);\n\t\ttwitchChatClientListeners.onTimeout = twitchChatClient.onTimeout(onChatUserTimeout);\n\t\tawait twitchChatClient.connect();\n\n\t\tconst globalBadges = await twitchClient.chat.getGlobalBadges();\n\t\tconst channelBadges = await twitchClient.chat.getChannelBadges(twitchCredentials.value.connectedAs);\n\n\t\tglobalBadges.forEach(b => twitchChatBadges[b.id] = b);\n\t\tchannelBadges.forEach(b => twitchChatBadges[b.id] = b);\n\n\t\tupdateTwitchClips();\n\t}\n\n\tconst onTwitchAuthLogout = async () => {\n\t\ttwitchPubSubListeners.onBits = undefined;\n\t\ttwitchPubSubListeners.onSubscription = undefined;\n\t\ttwitchPubSubListeners.onRedemption = undefined;\n\t\ttwitchPubSubListeners.onBitsBadgeUnlock = undefined;\n\t\ttwitchCredentials.value.isConnected = false;\n\t\tdelete twitchCredentials.value.connectedAs;\n\t\ttwitchPubSubClient = undefined;\n\t\ttwitchClient = undefined;\n\t}\n\n\tconst twitchAuthRouter = getTwitchAuthRouter(nodecg, twitchCredentials, onTwitchAuthSuccess);\n\n\tnodecg.mount(`/${nodecg.bundleName}`, twitchAuthRouter);\n\n\tnodecg.listenFor('logoutTwitch', onTwitchAuthLogout);\n\tnodecg.listenFor('clearTwitchEvents', clearTwitchEvents);\n\tnodecg.listenFor('updateTwitchClips', updateTwitchClips);\n\n\tif (twitchCredentials.value.isConnected) onTwitchAuthSuccess().then(() => nodecg.log.info('Reconnected to Twitch'));\n}\n\n// noinspection JSUnusedGlobalSymbols\nexport default Bundle;\n","module.exports = require(\"@twurple/auth\");","import {NodeCG, Replicant} from \"../../../../../types/server\";\nimport URI from \"urijs\";\nimport {TwitchCredentials} from \"../types\";\nimport fetch from 'node-fetch';\n\nexport function getTwitchAuthRouter(nodecg: NodeCG, twitchCredentials: Replicant<TwitchCredentials>, onAuthSuccess: () => void) {\n\t// @ts-ignore\n\tconst router = nodecg.Router();\n\n\trouter.get('/authorize', nodecg.util.authCheck, (req: any, res: any) => {\n\t\tconst uri = new URI('https://id.twitch.tv/oauth2/authorize')\n\t\t\t.addSearch(\"client_id\", twitchCredentials.value.clientId)\n\t\t\t.addSearch(\"redirect_uri\", getCallbackUrl(nodecg))\n\t\t\t.addSearch(\"response_type\", \"code\")\n\t\t\t.addSearch(\"force_verify\", \"true\")\n\t\t\t.addSearch(\"scope\", \"channel:read:subscriptions bits:read channel:read:redemptions channel_subscriptions chat:read chat:edit\");\n\n\t\tres.redirect(uri.toString());\n\t});\n\n\trouter.get('/callback', (req: any, res: any) => {\n\t\tconst uri = new URI('https://id.twitch.tv/oauth2/token')\n\t\t\t.addSearch(\"client_id\", twitchCredentials.value.clientId)\n\t\t\t.addSearch(\"client_secret\", twitchCredentials.value.clientSecret)\n\t\t\t.addSearch(\"code\", req.query.code)\n\t\t\t.addSearch(\"redirect_uri\", getCallbackUrl(nodecg))\n\t\t\t.addSearch(\"grant_type\", \"authorization_code\");\n\n\t\tfetch(uri.toString(),\n\t\t\t{method: 'POST'})\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\ttwitchCredentials.value.accessToken = json.access_token;\n\t\t\t\ttwitchCredentials.value.refreshToken = json.refresh_token;\n\t\t\t\tres.send('Success, you can now close this window!');\n\t\t\t\tonAuthSuccess();\n\t\t\t});\n\t});\n\n\t// @ts-ignore\n\tnodecg.listenFor('getAuthorizeUrl', (v, ack) => ack(null, getAuthorizeUrl(nodecg)));\n\t// @ts-ignore\n\tnodecg.listenFor('getCallbackUrl', (v, ack) => ack(null, getCallbackUrl(nodecg)));\n\n\treturn router;\n}\n\nfunction getCallbackUrl(nodecg: NodeCG) {\n\treturn new URI()\n\t\t.protocol(nodecg.config.ssl?.enabled ? 'https' : 'http')\n\t\t.host(nodecg.config.baseURL)\n\t\t.path(`${nodecg.bundleName}/callback`)\n\t\t.toString();\n}\n\nfunction getAuthorizeUrl(nodecg: NodeCG) {\n\treturn new URI()\n\t\t.protocol(nodecg.config.ssl?.enabled ? 'https' : 'http')\n\t\t.host(nodecg.config.baseURL)\n\t\t.path(`${nodecg.bundleName}/authorize`)\n\t\t.toString();\n}\n","module.exports = require(\"urijs\");","module.exports = require(\"node-fetch\");","module.exports = require(\"@twurple/api\");","module.exports = require(\"@twurple/pubsub\");","module.exports = require(\"@twurple/chat\");","module.exports = require(\"@twurple/common\");"],"sourceRoot":""}