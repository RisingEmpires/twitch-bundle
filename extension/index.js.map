{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/extension/index.ts","webpack:///external \"@twurple/auth\"","webpack:///./src/extension/router/twitch-auth.ts","webpack:///external \"urijs\"","webpack:///external \"node-fetch\"","webpack:///external \"@twurple/api\"","webpack:///external \"@twurple/pubsub\"","webpack:///external \"@twurple/chat\"","webpack:///external \"@twurple/common\""],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","nodecg","twitchClient","twitchPubSubClient","twitchChatClient","twitchCredentials","Replicant","defaultValue","clientId","clientSecret","accessToken","undefined","refreshToken","expiresIn","obtainmentTimestamp","connectedAs","isConnected","twitchEvents","twitchClips","twitchChat","twitchPubSubListeners","twitchChatClientListeners","addTwitchPubSubEvent","messageName","data","log","info","JSON","stringify","rawDataSymbol","unshift","type","sendMessage","updateTwitchClips","clips","getClipsForBroadcasterPaginated","getAll","then","sort","a","b","creationDate","getTime","map","clip","id","creatorDisplayName","title","url","thumbnailUrl","replace","creator_name","created_at","toISOString","twitchHello","twitchHelloIgnore","manageTwitchChatMessages","channel","user","message","msg","length","shift","savedMessage","rawMessage","username","userInfo","displayName","parsedMessage","parseEmotes","messageId","messageTime","Date","push","findIndex","e","includes","firstMessageTimestamp","checkHello","onTwitchDeleteChatMessage","text","position","onChatUserTimeout","twitchSubs","twitchFollows","listenFor","_val","ack","subscriptions","getSubscriptions","subs","filter","v","userName","followResult","users","getFollowsPaginated","followedUser","f","onTwitchAuthSuccess","authProvider","RefreshingAuthProvider","onRefresh","tokens","ApiClient","getMe","SingleUserPubSubClient","onBits","onRedemption","onBitsBadgeUnlock","ChatClient","channels","onMessage","onAction","onDelete","onMessageRemove","onTimeout","connect","twitchAuthRouter","getTwitchAuthRouter","mount","bundleName","remove","onSubscription","require","getCallbackUrl","protocol","config","ssl","enabled","host","baseURL","path","toString","onAuthSuccess","router","Router","util","authCheck","req","res","uri","addSearch","redirect","query","code","method","json","access_token","refresh_token","send","getAuthorizeUrl"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import {RefreshingAuthProvider} from '@twurple/auth';\r\nimport {NodeCG, Replicant} from '../../../../types/server';\r\nimport {getTwitchAuthRouter} from \"./router/twitch-auth\";\r\nimport {\r\n\tPubSubEventMessage,\r\n\tTwitchChatClientListeners,\r\n\tTwitchClip,\r\n\tTwitchCredentials,\r\n\tTwitchEvent,\r\n\tTwitchPubSubListeners\r\n} from \"./types\";\r\nimport {ApiClient} from \"@twurple/api\";\r\nimport {SingleUserPubSubClient} from '@twurple/pubsub';\r\nimport {ChatClient} from '@twurple/chat';\r\nimport {ParsedMessagePart} from '@twurple/common';\r\nimport {TwitchPrivateMessage} from \"@twurple/chat/lib/commands/TwitchPrivateMessage\";\r\nimport {rawDataSymbol} from '@twurple/common';\r\n\r\ninterface ChatMessageData {\r\n\tusername: string,\r\n\tmessageTime: string,\r\n\tmessageId: string,\r\n\tparsedMessage: [ParsedMessagePart],\r\n}\r\n\r\ninterface TwitchHello {\r\n\tusername: string;\r\n\tfirstMessageTimestamp: number;\r\n}\r\n\r\nfunction Bundle(nodecg: NodeCG) {\r\n\tconst twitchCredentials: Replicant<TwitchCredentials> = nodecg.Replicant('twitchCredentials', {\r\n\t\tdefaultValue: {\r\n\t\t\tclientId: '',\r\n\t\t\tclientSecret: '',\r\n\t\t\taccessToken: undefined,\r\n\t\t\trefreshToken: undefined,\r\n\t\t\texpiresIn: 0,\r\n\t\t\tobtainmentTimestamp: 0,\r\n\t\t\tconnectedAs: undefined,\r\n\t\t\tisConnected: false,\r\n\t\t}\r\n\t});\r\n\tconst twitchEvents: Replicant<TwitchEvent[]> = nodecg.Replicant('twitchEvents', {defaultValue: []});\r\n\tconst twitchClips: Replicant<TwitchClip[]> = nodecg.Replicant('twitchClips', {defaultValue: []});\r\n\tconst twitchChat: Replicant<ChatMessageData[]> = nodecg.Replicant('twitchChat', {defaultValue: []});\r\n\tnodecg.Replicant<{ [id: string]: TwitchClip }>('twitchSelectedClips', {defaultValue: {}});\r\n\r\n\tlet twitchClient: ApiClient;\r\n\tlet twitchPubSubClient;\r\n\tlet twitchChatClient;\r\n\tlet twitchPubSubListeners: TwitchPubSubListeners = {};\r\n\tlet twitchChatClientListeners: TwitchChatClientListeners = {};\r\n\r\n\tconst addTwitchPubSubEvent = (messageName: string) => (data: PubSubEventMessage) => {\r\n\t\tnodecg.log.info(`Received message ${messageName}`);\r\n\t\tnodecg.log.info(`Raw Data: ${JSON.stringify(data[rawDataSymbol].data, null, 4)}`);\r\n\t\ttwitchEvents.value.unshift({type: 'PubSub', messageName, data: data[rawDataSymbol].data});\r\n\t\tnodecg.sendMessage(messageName, data[rawDataSymbol].data);\r\n\t};\r\n\tconst clearTwitchEvents = () => {\r\n\t\ttwitchEvents.value = []\r\n\t};\r\n\tconst updateTwitchClips = () => {\r\n\t\tif (!twitchCredentials.value.connectedAs)\r\n\t\t\treturn;\r\n\r\n\t\ttwitchClient.clips.getClipsForBroadcasterPaginated(twitchCredentials.value.connectedAs).getAll().then(clips => {\r\n\t\t\ttwitchClips.value = clips.sort((a, b) => b.creationDate.getTime() - a.creationDate.getTime()).map(clip => {\r\n\t\t\t\tconst {id, creatorDisplayName, title, creationDate} = clip;\r\n\t\t\t\tconst thumbnailUrl = clip.thumbnailUrl.replace(\"-preview-480x272.jpg\", \".mp4\");\r\n\t\t\t\t// nodecg.log.info('Clips: ' + thumbnailUrl);\r\n\t\t\t\treturn {\r\n\t\t\t\t\tid,\r\n\t\t\t\t\turl: thumbnailUrl,\r\n\t\t\t\t\tcreator_name: creatorDisplayName,\r\n\t\t\t\t\ttitle,\r\n\t\t\t\t\tcreated_at: creationDate.toISOString()\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\tconst twitchHello: Replicant<TwitchHello[]> = nodecg.Replicant('twitchHello', {defaultValue: []});\r\n\tconst twitchHelloIgnore: Replicant<string[]> = nodecg.Replicant('twitchHelloIgnore', {defaultValue: []});\r\n\r\n\tconst checkHello = (message: any) => {\r\n\t\tconst userIndex = twitchHello.value.findIndex(e => e.username === message.username);\r\n\t\tif (userIndex >= 0) return;\r\n\t\tif (twitchHelloIgnore.value.includes(message.username)) return;\r\n\t\ttwitchHello.value.push({\r\n\t\t\tusername: message.username,\r\n\t\t\tfirstMessageTimestamp: message.messageTime,\r\n\t\t});\r\n\t}\r\n\r\n\tconst manageTwitchChatMessages = (channel: string, user: string, message: string, msg: TwitchPrivateMessage) => {\r\n\t\tif (channel === `#${twitchCredentials.value.connectedAs.name}`) {\r\n\t\t\tif (twitchChat.value.length > 50) {\r\n\t\t\t\ttwitchChat.value.shift();\r\n\t\t\t}\r\n\t\t\tlet savedMessage = {\r\n\t\t\t\t...msg,\r\n\t\t\t\trawMessage: message,\r\n\t\t\t\tusername: msg.userInfo.displayName,\r\n\t\t\t\tparsedMessage: msg.parseEmotes(),\r\n\t\t\t\tmessageId: msg.id,\r\n\t\t\t\tmessageTime: new Date().getTime(),\r\n\t\t\t}\r\n\t\t\t// @ts-ignore we've got slightly more than ChatMessageData but shh\r\n\t\t\ttwitchChat.value.push(savedMessage);\r\n\t\t\tcheckHello(savedMessage);\r\n\t\t}\r\n\t};\r\n\r\n\tconst onTwitchDeleteChatMessage = (channel: string, messageId: string) => {\r\n\t\ttwitchChat.value = twitchChat.value.map((m: ChatMessageData) => {\r\n\t\t\tif (m.messageId === messageId) {\r\n\t\t\t\tm.parsedMessage = [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: \"text\",\r\n\t\t\t\t\t\ttext: \"__REDACTED__\",\r\n\t\t\t\t\t\tlength: 12,\r\n\t\t\t\t\t\tposition: 0,\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t\tm.username = \"USER PURGED\"\r\n\t\t\t}\r\n\t\t\treturn m;\r\n\t\t});\r\n\t};\r\n\r\n\tconst onChatUserTimeout = (channel: string, user: string) => {\r\n\t\ttwitchChat.value = twitchChat.value.map((m: ChatMessageData) => {\r\n\t\t\tif (m.username === user) {\r\n\t\t\t\tm.parsedMessage = [\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\ttype: \"text\",\r\n\t\t\t\t\t\ttext: \"_ _ REDACTED _ _\",\r\n\t\t\t\t\t\tlength: 12,\r\n\t\t\t\t\t\tposition: 0,\r\n\t\t\t\t\t}\r\n\t\t\t\t]\r\n\t\t\t\tm.username = \"USER PURGED\"\r\n\t\t\t}\r\n\t\t\treturn m;\r\n\t\t});\r\n\t};\r\n\r\n\tconst twitchSubs: Replicant<{ username: string }[]> = nodecg.Replicant('twitchSubscribers', {defaultValue: []});\r\n\tconst twitchFollows: Replicant<{ username: string }[]> = nodecg.Replicant('twitchFollowers', {defaultValue: []});\r\n\r\n\tnodecg.listenFor('refreshCredits', async (_val, ack) => {\r\n\t\tnodecg.log.info('refreshCredits');\r\n\t\tconst subResult = twitchClient.subscriptions.getSubscriptions(twitchCredentials.value.connectedAs);\r\n\t\tconst subs = await subResult;\r\n\t\ttwitchSubs.value = subs.data\r\n\t\t\t.filter(v => v.userName !== twitchCredentials.value.connectedAs.name)\r\n\t\t\t.map(v => ({username: v.userDisplayName}));\r\n\t\tconst followResult = twitchClient.users.getFollowsPaginated({followedUser: twitchCredentials.value.connectedAs});\r\n\t\ttwitchFollows.value = await followResult.getAll()\r\n\t\t\t.then(r => r.map(f => ({username: f.userDisplayName})));\r\n\t\t// @ts-ignore\r\n\t\tack(null, 'complete');\r\n\t});\r\n\r\n\tconst onTwitchAuthSuccess = async () => {\r\n\t\tconst {clientId, clientSecret} = twitchCredentials.value;\r\n\r\n\t\tconst authProvider = new RefreshingAuthProvider(\r\n\t\t\t{\r\n\t\t\t\tclientId,\r\n\t\t\t\tclientSecret,\r\n\t\t\t\tonRefresh: async tokens => {\r\n\t\t\t\t\tnodecg.log.info('Refreshing Twitch Credentials');\r\n\t\t\t\t\ttwitchCredentials.value.accessToken = tokens.accessToken;\r\n\t\t\t\t\ttwitchCredentials.value.refreshToken = tokens.refreshToken;\r\n\t\t\t\t\ttwitchCredentials.value.expiresIn = tokens.expiresIn;\r\n\t\t\t\t\ttwitchCredentials.value.obtainmentTimestamp = tokens.obtainmentTimestamp;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\ttwitchCredentials.value,\r\n\t\t);\r\n\t\ttwitchClient = new ApiClient({authProvider});\r\n\t\tawait twitchClient.users.getMe().then(r => {\r\n\t\t\ttwitchCredentials.value.connectedAs = {id: r.id, name: r.name};\r\n\t\t\ttwitchCredentials.value.isConnected = true;\r\n\t\t});\r\n\r\n\t\ttwitchPubSubClient = new SingleUserPubSubClient({authProvider});\r\n\t\ttwitchPubSubListeners.onBits = await twitchPubSubClient.onBits(addTwitchPubSubEvent('bits'));\r\n\t\t// Currently not used on frontend, will need to make custom event manager\r\n\t\t// twitchPubSubListeners.onSubscription = await twitchPubSubClient.onSubscription(addTwitchPubSubEvent('subscription'));\r\n\t\ttwitchPubSubListeners.onRedemption = await twitchPubSubClient.onRedemption(addTwitchPubSubEvent('redemption'));\r\n\t\ttwitchPubSubListeners.onBitsBadgeUnlock = await twitchPubSubClient.onBitsBadgeUnlock(addTwitchPubSubEvent('bitsBadgeUnlock'));\r\n\r\n\t\ttwitchChatClient = new ChatClient({channels: [twitchCredentials.value.connectedAs.name]});\r\n\r\n\t\t// twitchChatClient.onJoin((channel, user) => {\r\n\t\t// \tnodecg.log.info(`Twitch Chat: Connected to ${channel} as ${user}`);\r\n\t\t// });\r\n\t\ttwitchChatClientListeners.onMessage = twitchChatClient.onMessage(manageTwitchChatMessages);\r\n\t\ttwitchChatClientListeners.onAction = twitchChatClient.onAction(manageTwitchChatMessages);\r\n\t\ttwitchChatClientListeners.onDelete = twitchChatClient.onMessageRemove(onTwitchDeleteChatMessage);\r\n\t\ttwitchChatClientListeners.onTimeout = twitchChatClient.onTimeout(onChatUserTimeout);\r\n\t\tawait twitchChatClient.connect();\r\n\r\n\t\tupdateTwitchClips();\r\n\t}\r\n\r\n\tconst onTwitchAuthLogout = async () => {\r\n\t\tawait twitchPubSubListeners.onBits.remove();\r\n\t\tawait twitchPubSubListeners.onSubscription.remove();\r\n\t\tawait twitchPubSubListeners.onRedemption.remove();\r\n\t\tawait twitchPubSubListeners.onBitsBadgeUnlock.remove();\r\n\t\ttwitchCredentials.value.isConnected = false;\r\n\t\tdelete twitchCredentials.value.connectedAs;\r\n\t\ttwitchPubSubClient = undefined;\r\n\t\ttwitchClient = undefined;\r\n\t}\r\n\r\n\tconst twitchAuthRouter = getTwitchAuthRouter(nodecg, twitchCredentials, onTwitchAuthSuccess);\r\n\r\n\tnodecg.mount(`/${nodecg.bundleName}`, twitchAuthRouter);\r\n\r\n\tnodecg.listenFor('logoutTwitch', onTwitchAuthLogout);\r\n\tnodecg.listenFor('clearTwitchEvents', clearTwitchEvents);\r\n\tnodecg.listenFor('updateTwitchClips', updateTwitchClips);\r\n\r\n\tif (twitchCredentials.value.isConnected) onTwitchAuthSuccess().then(() => nodecg.log.info('Reconnected to Twitch'));\r\n}\r\n\r\n// noinspection JSUnusedGlobalSymbols\r\nexport default Bundle;\r\n","module.exports = require(\"@twurple/auth\");","import {NodeCG, Replicant} from \"../../../../../types/server\";\nimport URI from \"urijs\";\nimport {TwitchCredentials} from \"../types\";\nimport fetch from 'node-fetch';\n\nexport function getTwitchAuthRouter(nodecg: NodeCG, twitchCredentials: Replicant<TwitchCredentials>, onAuthSuccess: () => void) {\n\t// @ts-ignore\n\tconst router = nodecg.Router();\n\n\trouter.get('/authorize', nodecg.util.authCheck, (req: any, res: any) => {\n\t\tconst uri = new URI('https://id.twitch.tv/oauth2/authorize')\n\t\t\t.addSearch(\"client_id\", twitchCredentials.value.clientId)\n\t\t\t.addSearch(\"redirect_uri\", getCallbackUrl(nodecg))\n\t\t\t.addSearch(\"response_type\", \"code\")\n\t\t\t.addSearch(\"force_verify\", \"true\")\n\t\t\t.addSearch(\"scope\", \"channel:read:subscriptions bits:read channel:read:redemptions channel_subscriptions chat:read chat:edit\");\n\n\t\tres.redirect(uri.toString());\n\t});\n\n\trouter.get('/callback', (req: any, res: any) => {\n\t\tconst uri = new URI('https://id.twitch.tv/oauth2/token')\n\t\t\t.addSearch(\"client_id\", twitchCredentials.value.clientId)\n\t\t\t.addSearch(\"client_secret\", twitchCredentials.value.clientSecret)\n\t\t\t.addSearch(\"code\", req.query.code)\n\t\t\t.addSearch(\"redirect_uri\", getCallbackUrl(nodecg))\n\t\t\t.addSearch(\"grant_type\", \"authorization_code\");\n\n\t\tfetch(uri.toString(),\n\t\t\t{method: 'POST'})\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\ttwitchCredentials.value.accessToken = json.access_token;\n\t\t\t\ttwitchCredentials.value.refreshToken = json.refresh_token;\n\t\t\t\tres.send('Success, you can now close this window!');\n\t\t\t\tonAuthSuccess();\n\t\t\t});\n\t});\n\n\t// @ts-ignore\n\tnodecg.listenFor('getAuthorizeUrl', (v, ack) => ack(null, getAuthorizeUrl(nodecg)));\n\t// @ts-ignore\n\tnodecg.listenFor('getCallbackUrl', (v, ack) => ack(null, getCallbackUrl(nodecg)));\n\n\treturn router;\n}\n\nfunction getCallbackUrl(nodecg: NodeCG) {\n\treturn new URI()\n\t\t.protocol(nodecg.config.ssl?.enabled ? 'https' : 'http')\n\t\t.host(nodecg.config.baseURL)\n\t\t.path(`${nodecg.bundleName}/callback`)\n\t\t.toString();\n}\n\nfunction getAuthorizeUrl(nodecg: NodeCG) {\n\treturn new URI()\n\t\t.protocol(nodecg.config.ssl?.enabled ? 'https' : 'http')\n\t\t.host(nodecg.config.baseURL)\n\t\t.path(`${nodecg.bundleName}/authorize`)\n\t\t.toString();\n}\n","module.exports = require(\"urijs\");","module.exports = require(\"node-fetch\");","module.exports = require(\"@twurple/api\");","module.exports = require(\"@twurple/pubsub\");","module.exports = require(\"@twurple/chat\");","module.exports = require(\"@twurple/common\");"],"sourceRoot":""}